syntax = "proto3";

enum WorkerType {
    RESERVED_WT = 0;
    BUILDER = 1;
}

// Overmind -> worker commands.
enum CommandType {
    RESERVED_CT = 0;
    PRINT_STATUS = 1; // () -> STATUS, IO_STATUS
    SCAN_I2C = 2;  // () -> I2C_SCAN_RESULT
    ENQUEUE = 3;  // EnqueueCommand -> ENQUEUE_RESULT
    SET_MODE = 4;  // SetModeCommand -> ()  (async: IO_STATUS, conditional)

    // planned.
    READ_SENSOR_DUMP = 5;
}

// For compatibility reason, this won't be used as proto.
// Instead, it will precede proto (or other message) as one-byte type.
enum PacketType {
    RESERVED_PT = 0;
    STATUS = 1;
    IO_STATUS = 2;
    I2C_SCAN_RESULT = 5;
    ENQUEUE_RESULT = 3;
    // Corresponds to '{', initiator of JSON messages.
    LEGACY = 123;
}


message EnqueueCommand {
    repeated NewAction action = 1;
}

message SetModeCommand {
    // Emit sensor data very frequently (1Hz~10Hz) for given TTL period.
    // Overwrites current TTL. 0 means disable now.
    uint32 verbose_sensor_ttl_ms = 1;
}

message NewAction {
    // [1, 5000]
    uint32 duration_ms = 1;

    // Velocity control: set to new value immediately, at the beginning of the Action.
    // -0x7f(0x81) ~ 0x7f: set to this value. 0x80: KEEP current.
    sint32 loc_forward_vel = 2;
    sint32 loc_rotation_vel = 3;
    sint32 driver_lock_vel = 4 ;

    // Position control: linearly move to new value, during the priod of the Action.
    uint32 driver_z_pos = 5;
    uint32 driver_y_pos = 6;
    uint32 rail_arm_pos = 7;

    // TBD:
    /*
    uint32 stop_loc_forward_if_pos = 8;  // Trigger on fused opt encoder + odometry signal.
    uint32 stop_loc_rotation_if_orient = 9;  // Trigger on fused (or just sliced) orientation.
    */
}

message I2CScanResult {
    enum ResultType {
        OK = 0;
        ERROR_ABORTED = 1;
        ERROR_TOO_MANY = 2;
    }
    ResultType type = 1;
    repeated uint32 device = 2;
}

message Status {
    WorkerType worker_type = 1;

    SystemStatus system = 2;

    // ActionQueue
    ExecStatus exec = 5;
    QueueStatus queue = 6;

    reserved 3, 4;
}

// Splitted from Status to avoid stack overflow when processing.
message IOStatus {
    SensorStatus sensor = 1;
    OutputStatus output = 2;
}

message SystemStatus {
    uint32 vcc_mv = 1;
    uint32 bat_mv = 2;
    uint32 recv_byte = 3;
    uint32 sent_byte = 4;
    uint32 num_invalid_packet = 5;
}

message SensorStatus {
    // Unit: in centi-degree/sec.
    sint32 gyro_x_cdps = 1;
    sint32 gyro_y_cdps = 2;
    sint32 gyro_z_cdps = 3;

    // Unit: in milli-G (1 mg = 9.8 mm/s^2)
    sint32 acc_x_mg = 4;
    sint32 acc_y_mg = 5;
    sint32 acc_z_mg = 6;
}

// Actuator output values at certain time.
//
// vel is in: [-0x7f, 0x7f]
message OutputStatus {
    sint32 loc_forward_vel = 1;  // Z+

    // Rotation axis (Y+) velocity seen from top.
    // CCW is positive.
    sint32 loc_rotation_vel = 2;

    sint32 driver_lock_vel = 3;
    uint32 driver_z_pos = 4;
    uint32 driver_y_pos = 5;

    uint32 rail_arm_pos = 6;
}

message ExecStatus {
    enum Status {
        IDLE = 0;
        RUNNING = 1;
        DONE = 2;
    }
    Status status = 1;
    uint32 duration_ms = 2;
    uint32 elapsed_ms = 3;
}

message QueueStatus {
    uint32 queued = 1;
    uint32 free = 2;
}
